import org.junit.platform.console.ConsoleLauncher

apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'

junitPlatform {
    // platformVersion '1.0.0-M4'
    filters {
        engines {
            include 'junit-jupiter' //, 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    // logManager 'org.apache.logging.log4j.jul.LogManager'
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task oldIntegrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

afterEvaluate {

    JavaExec junitIntegrationTestTask = project.tasks.create("integrationTest", JavaExec) {
        it.with {


            group = JavaBasePlugin.VERIFICATION_GROUP
            description = 'Runs instrumentation tests on the JUnit Platform.'

            def reportsDir = project.file("$project.buildDir/test-integration-results/junit-platform")

            outputs.upToDateWhen { false }
            outputs.dir reportsDir

            //configureTaskDependencies(project, it, junitExtension)
            def testClassesTask = project.tasks.getByName('integrationTestClasses')
            dependsOn testClassesTask

            classpath = project.sourceSets.integrationTest.runtimeClasspath + project.configurations.junitPlatform

            def paramsA = []
            paramsA.add("--reports-dir")
            paramsA.add(reportsDir.getAbsolutePath())
            paramsA.add("--details")
            paramsA.add("none")

            def rootDirs = []
            project.sourceSets.each { sourceSet ->
                if (sourceSet.name == "integrationTest") {
                    rootDirs.add(sourceSet.output.classesDir)
                    rootDirs.add(sourceSet.output.resourcesDir)
                    rootDirs.addAll(sourceSet.output.dirs.files)
                }
            }
            paramsA.addAll(['--scan-class-path', rootDirs.join(File.pathSeparator)])

            paramsA.forEach {
                System.out.println(it)
            }

            args paramsA.toList()
            main ConsoleLauncher.class.getName()
        }

    }

    check.dependsOn junitIntegrationTestTask
    junitIntegrationTestTask.mustRunAfter test
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

ext.junitJupiterVersion = '5.0.0-M4'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "io.reactivex.rxjava2:rxjava:2.0.9"
    compile 'mysql:mysql-connector-java:6.0.6'
    compile 'com.squareup.okhttp3:okhttp:3.7.0'
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.12"

    testCompile 'org.assertj:assertj-core:3.7.0'
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    integrationTestCompile 'org.assertj:assertj-core:3.0.0'
    integrationTestCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    integrationTestRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}
